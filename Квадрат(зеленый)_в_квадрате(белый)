#include <iostream>

#define GLEW_STATIC
#include <GL/glew.h>
#include <GLFW/glfw3.h>

const GLchar* VertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 position;\n"
"void main()\n"
"{\n"
"gl_Position = vec4(position.x, position.y, position.z, 1.0f);\n"
"}\n\0";

const GLchar* FragmentShader1Source = "#version 330 core\n"
"out vec4 color;\n"
"void main()\n"
"{\n"
"color = vec4(0.0f, 0.5f, 0.0f, 1.0f);\n"
"}\n\0";

const GLchar* FragmentShader2Source = "#version 330 core\n"
"out vec4 color;\n"
"void main()\n"
"{\n"
"color = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n"
"}\n\0";

int main()
{
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);
	GLFWwindow* window = glfwCreateWindow(800, 800, "Pole", nullptr, nullptr);
	if (window == nullptr) {
		std::cout << "error 1" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);

	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK) {
		std::cout << "error 2" << std::endl;
		return -1;
	}

	int weight, hight;
	glfwGetFramebufferSize(window, &weight, &hight);
	glViewport(0, 0, weight, hight);

	GLuint vertexshader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexshader, 1, &VertexShaderSource, NULL);
	glCompileShader(vertexshader);
	GLint success;
	GLchar infolog[512];
	glGetShaderiv(vertexshader, GL_COMPILE_STATUS, &success);
	if (!success) {
		glGetShaderInfoLog(vertexshader, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	GLuint fragmentshader1 = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentshader1, 1, &FragmentShader1Source, NULL);
	glCompileShader(fragmentshader1);
	glGetShaderiv(fragmentshader1, GL_COMPILE_STATUS, &success);
	if (!success) {
		glGetShaderInfoLog(fragmentshader1, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	GLuint fragmentshader2 = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentshader2, 1, &FragmentShader2Source, NULL);
	glCompileShader(fragmentshader2);
	glGetShaderiv(fragmentshader2, GL_COMPILE_STATUS, &success);
	if (!success) {
		glGetShaderInfoLog(fragmentshader2, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	GLuint programshaderG = glCreateProgram();
	glAttachShader(programshaderG, vertexshader);
	glAttachShader(programshaderG, fragmentshader1);
	glLinkProgram(programshaderG);
	glGetProgramiv(programshaderG, GL_LINK_STATUS, &success);
	if (!success) {
		glGetProgramInfoLog(programshaderG, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	GLuint programshaderW = glCreateProgram();
	glAttachShader(programshaderW, vertexshader);
	glAttachShader(programshaderW, fragmentshader2);
	glLinkProgram(programshaderW);
	glGetProgramiv(programshaderW, GL_LINK_STATUS, &success);
	if (!success) {
		glGetProgramInfoLog(programshaderW, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	glDeleteShader(vertexshader);
	glDeleteShader(fragmentshader1);
	glDeleteShader(fragmentshader2);

	GLfloat vertices[] = {
		-0.90f, 0.95f, 0.0f,
		-0.90f, 0.40f, 0.0f,
		-0.40f, 0.40f, 0.0f,
		-0.40f, 0.95f, 0.0f
	};
	GLfloat vertices2[] = {
		-0.8f, 0.85f, 0.0f,
		-0.8f, 0.5f, 0.0f,
		-0.5f, 0.5f, 0.0f,
		-0.5f, 0.85f, 0.0f
	};
	GLuint indexces[] = {
		0, 1, 2,
		0, 2, 3
	};

	GLuint VAO[20], VBO[20], EBO[20];
	glGenBuffers(20, VBO);
	glGenBuffers(20, EBO);
	glGenVertexArrays(20, VAO);

	for (int i = 0; i < 20; ++i) {
		if (i % 2 == 0) {
			if (i % 3 == 0 && i != 0) {
				vertices[0] = -0.90f;
				vertices[3] = -0.90f;
				vertices[6] = -0.40f;
				vertices[9] = -0.40f;

				vertices[1] -= 0.65f;
				vertices[4] -= 0.65f;
				vertices[7] -= 0.65f;
				vertices[10] -= 0.65f;

				glBindVertexArray(VAO[i]);
				glBindBuffer(GL_ARRAY_BUFFER, VBO[i]);
				glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
				glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[i]);
				glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indexces), indexces, GL_STATIC_DRAW);
				glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
				glEnableVertexAttribArray(0);
				glBindBuffer(GL_ARRAY_BUFFER, 0);
				glBindVertexArray(0);

				vertices[0] += 0.65f;
				vertices[3] += 0.65f;
				vertices[6] += 0.65f;
				vertices[9] += 0.65f;
				continue;
			}
			glBindVertexArray(VAO[i]);
			glBindBuffer(GL_ARRAY_BUFFER, VBO[i]);
			glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[i]);
			glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indexces), indexces, GL_STATIC_DRAW);
			glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
			glEnableVertexAttribArray(0);
			glBindBuffer(GL_ARRAY_BUFFER, 0);
			glBindVertexArray(0);

			vertices[0] += 0.65f;
			vertices[3] += 0.65f;
			vertices[6] += 0.65f;
			vertices[9] += 0.65f;
		}
		else {
			if (i != 3 && i % 3 == 0) {

				vertices2[0] = -0.8f;
				vertices2[3] = -0.8f;
				vertices2[6] = -0.5f;
				vertices2[9] = -0.5f;

				vertices2[1] -= 0.65f;
				vertices2[4] -= 0.65f;
				vertices2[7] -= 0.65f;
				vertices2[10] -= 0.65f;

				glBindVertexArray(VAO[i]);
				glBindBuffer(GL_ARRAY_BUFFER, VBO[i]);
				glBufferData(GL_ARRAY_BUFFER, sizeof(vertices2), vertices2, GL_STATIC_DRAW);
				glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[i]);
				glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indexces), indexces, GL_STATIC_DRAW);
				glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
				glEnableVertexAttribArray(0);
				glBindBuffer(GL_ARRAY_BUFFER, 0);
				glBindVertexArray(0);

				vertices2[0] += 0.65f;
				vertices2[3] += 0.65f;
				vertices2[6] += 0.65f;
				vertices2[9] += 0.65f;
				continue;
			}

			glBindVertexArray(VAO[i]);
			glBindBuffer(GL_ARRAY_BUFFER, VBO[i]);
			glBufferData(GL_ARRAY_BUFFER, sizeof(vertices2), vertices2, GL_STATIC_DRAW);
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[i]);
			glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indexces), indexces, GL_STATIC_DRAW);
			glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
			glEnableVertexAttribArray(0);
			glBindBuffer(GL_ARRAY_BUFFER, 0);
			glBindVertexArray(0);

			vertices2[0] += 0.65f;
			vertices2[3] += 0.65f;
			vertices2[6] += 0.65f;
			vertices2[9] += 0.65f;
		}
	}

	while (!glfwWindowShouldClose(window)) {
		glfwPollEvents();

		glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		for (int i = 0; i < 20; ++i) {
			if (i % 2 == 0) {
				glUseProgram(programshaderG);
				glBindVertexArray(VAO[i]);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
				glBindVertexArray(0);
			}
		}
		for (int i = 0; i < 20; ++i) {
			if (i % 2 != 0) {
				glUseProgram(programshaderW);
				glBindVertexArray(VAO[i]);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
				glBindVertexArray(0);
			}
		}

		glfwSwapBuffers(window);
	}

	glDeleteVertexArrays(20, VAO);
	glDeleteBuffers(20, VBO);
	glDeleteBuffers(20, EBO);
	glfwTerminate();

	return 0;
}
