#include <iostream>
#include <cmath>

#define GLEW_STATIC
#include <GL/glew.h>
#include <GLFW/glfw3.h>

const GLchar* VertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 position;\n"
"void main()\n"
"{\n"
"gl_Position = vec4(position.x, -position.y, position.z, 1.0f);\n"
"}\n\0";

const GLchar* FragmentShaderSource = "#version 330 core\n"
"out vec4 color;\n"
"uniform vec4 outcolor;\n"
"void main()\n"
"{\n"
"color = outcolor;\n"
"}\n\0";

int main()
{
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_RESIZABLE, GL_TRUE);
	GLFWwindow* window = glfwCreateWindow(800, 800, "lesson", nullptr, nullptr);
	if (window == nullptr) {
		std::cout << "error 1" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK) {
		std::cout << "error 2" << std::endl;
		return -1;
	}
	int weight, hight;
	glfwGetFramebufferSize(window, &weight, &hight);
	glViewport(0, 0, weight, hight);
	GLuint vertexshader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexshader, 1, &VertexShaderSource, NULL);
	glCompileShader(vertexshader);
	GLint success;
	GLchar infolog[512];
	glGetShaderiv(vertexshader, GL_COMPILE_STATUS, &success);
	if (!success) {
		glGetShaderInfoLog(vertexshader, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	GLuint fragmentshader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentshader, 1, &FragmentShaderSource, NULL);
	glCompileShader(fragmentshader);
	glGetShaderiv(fragmentshader, GL_COMPILE_STATUS, &success);
	if (!success) {
		glGetShaderInfoLog(fragmentshader, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	GLuint programshader = glCreateProgram();
	glAttachShader(programshader, vertexshader);
	glAttachShader(programshader, fragmentshader);
	glLinkProgram(programshader);
	glGetProgramiv(programshader, GL_LINK_STATUS, &success);
	if (!success) {
		glGetProgramInfoLog(programshader, 512, NULL, infolog);
		std::cout << infolog << std::endl;
	}
	glDeleteShader(vertexshader);
	glDeleteShader(fragmentshader);
	GLfloat vertices[] = {
		-0.5f, -0.5f, 0.0f,
		0.5f, -0.5f, 0.0f,
		0.0f, 0.5f, 0.0f
	};
	GLuint VAO, VBO;
	glGenBuffers(1, &VBO);
	glGenVertexArrays(1, &VAO);
	/*glBindVertexArray(VAO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);*/
	while (!glfwWindowShouldClose(window)) {
		glfwPollEvents();
		glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);
		glUseProgram(programshader);
		GLfloat timevalue = glfwGetTime();
		GLfloat greenValue = (sin(timevalue) / 2) + 0.5;
		GLint VertexLocation = glGetUniformLocation(programshader, "outcolor");
		glUniform4f(VertexLocation, 0.0f, greenValue, 0.0f, 1.0f);

		glBindVertexArray(VAO);
		glBindBuffer(GL_ARRAY_BUFFER, VBO);
		glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
		glEnableVertexAttribArray(0);
		glBindBuffer(GL_ARRAY_BUFFER, 0);
		glBindVertexArray(0);

		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glBindVertexArray(0);
		glfwSwapBuffers(window);
		if (vertices[0] >= 0.5f) {
			while (vertices[0] >= -0.5f) {
				vertices[0] -= 0.0001f;
				vertices[1] -= 0.0001f;

				glfwPollEvents();
				glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
				glClear(GL_COLOR_BUFFER_BIT);
				glUseProgram(programshader);
				GLfloat timevalue = glfwGetTime();
				GLfloat greenValue = (sin(timevalue) / 2) + 0.5;
				GLint VertexLocation = glGetUniformLocation(programshader, "outcolor");
				glUniform4f(VertexLocation, 0.0f, greenValue, 0.0f, 1.0f);

				glBindVertexArray(VAO);
				glBindBuffer(GL_ARRAY_BUFFER, VBO);
				glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
				glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
				glEnableVertexAttribArray(0);
				glBindBuffer(GL_ARRAY_BUFFER, 0);
				glBindVertexArray(0);

				glBindVertexArray(VAO);
				glDrawArrays(GL_TRIANGLES, 0, 3);
				glBindVertexArray(0);
				glfwSwapBuffers(window);
			}

			continue;
		}
		vertices[0] += 0.0001f;
		vertices[1] += 0.0001f;
	}
	glDeleteBuffers(1, &VBO);
	glDeleteVertexArrays(1, &VAO);
	glfwTerminate();
	return 0;
}
